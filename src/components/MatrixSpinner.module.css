/* Import the existing spinner styles */
@import '../css/components/_spinner.css';

/* Module-specific overrides and additions */
.matrixSpinner {
  composes: matrix-spinner from global;
}

.matrixSpinnerOverlay {
  composes: matrix-spinner-overlay from global;
}

.active {
  composes: active from global;
}

.spinnerInner {
  composes: matrix-spinner-inner from global;
}

.spinnerChar {
  composes: spinner-char from global;
}

/* Position characters in a circle using CSS custom properties */
.spinnerChar:nth-child(1) { --char-index: 0; }
.spinnerChar:nth-child(2) { --char-index: 1; }
.spinnerChar:nth-child(3) { --char-index: 2; }
.spinnerChar:nth-child(4) { --char-index: 3; }
.spinnerChar:nth-child(5) { --char-index: 4; }
.spinnerChar:nth-child(6) { --char-index: 5; }
.spinnerChar:nth-child(7) { --char-index: 6; }
.spinnerChar:nth-child(8) { --char-index: 7; }

.spinnerChar {
  --angle: calc(var(--char-index) * 45deg);
  --radius: 50px;
  position: absolute;
  left: calc(50% + var(--radius) * cos(var(--angle)));
  top: calc(50% + var(--radius) * sin(var(--angle)));
  transform: translate(-50%, -50%);
}

/* Size variants */
.small {
  composes: spinner-minimal from global;
}

.small .spinnerChar {
  --radius: 20px;
}

.large {
  composes: spinner-large from global;
}

.large .spinnerChar {
  --radius: 80px;
}

.matrixSpinnerProgress {
  composes: matrix-spinner-progress from global;
}

.matrixSpinnerProgressBar {
  composes: matrix-spinner-progress-bar from global;
}

.matrixSpinnerText {
  composes: matrix-spinner-text from global;
}

.matrixSpinnerSrOnly {
  composes: matrix-spinner-sr-only from global;
}

/* Success state animations */
.spinnerChar.success {
  animation: spinnerSuccess 0.5s ease-out forwards;
}

@keyframes spinnerSuccess {
  to {
    transform: scale(0);
    opacity: 0;
  }
}

/* Error state animations */
.spinnerChar.error {
  color: var(--matrix-red);
  animation: spinnerError 0.5s ease-out;
}

@keyframes spinnerError {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-5px); }
  75% { transform: translateX(5px); }
}

/* Page transition variant */
.pageTransition {
  composes: page-transition-spinner from global;
}